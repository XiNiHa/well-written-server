//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, SimpleObject, seaography::macros::Filter)]
#[graphql(complex)]
#[graphql(name = "Blog")]
#[sea_orm(table_name = "blog")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub created_at: DateTimeUtc,
    pub deleted_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation, seaography::macros::RelationsCompact)]
pub enum Relation {
    #[sea_orm(has_many = "super::blog_membership::Entity")]
    BlogMembership,
}

impl Related<super::blog_membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogMembership.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
